/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PostPaymentLinksPath = string | number;

export type PostPaymentLinksIssues = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type PostPaymentLinksError = {
  issues: Array<PostPaymentLinksIssues>;
  name: string;
};

/**
 * The validation error(s)
 */
export type PostPaymentLinksResponseBodyData = {
  success: boolean;
  error: PostPaymentLinksError;
};

/**
 * The validation error(s)
 */
export class PostPaymentLinksResponseBody extends Error {
  success: boolean;
  error: PostPaymentLinksError;

  /** The original data that was passed to this error instance. */
  data$: PostPaymentLinksResponseBodyData;

  constructor(err: PostPaymentLinksResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.success = err.success;
    this.error = err.error;

    this.name = "PostPaymentLinksResponseBody";
  }
}

/** @internal */
export const PostPaymentLinksPath$inboundSchema: z.ZodType<
  PostPaymentLinksPath,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type PostPaymentLinksPath$Outbound = string | number;

/** @internal */
export const PostPaymentLinksPath$outboundSchema: z.ZodType<
  PostPaymentLinksPath$Outbound,
  z.ZodTypeDef,
  PostPaymentLinksPath
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPaymentLinksPath$ {
  /** @deprecated use `PostPaymentLinksPath$inboundSchema` instead. */
  export const inboundSchema = PostPaymentLinksPath$inboundSchema;
  /** @deprecated use `PostPaymentLinksPath$outboundSchema` instead. */
  export const outboundSchema = PostPaymentLinksPath$outboundSchema;
  /** @deprecated use `PostPaymentLinksPath$Outbound` instead. */
  export type Outbound = PostPaymentLinksPath$Outbound;
}

export function postPaymentLinksPathToJSON(
  postPaymentLinksPath: PostPaymentLinksPath,
): string {
  return JSON.stringify(
    PostPaymentLinksPath$outboundSchema.parse(postPaymentLinksPath),
  );
}

export function postPaymentLinksPathFromJSON(
  jsonString: string,
): SafeParseResult<PostPaymentLinksPath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPaymentLinksPath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPaymentLinksPath' from JSON`,
  );
}

/** @internal */
export const PostPaymentLinksIssues$inboundSchema: z.ZodType<
  PostPaymentLinksIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/** @internal */
export type PostPaymentLinksIssues$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const PostPaymentLinksIssues$outboundSchema: z.ZodType<
  PostPaymentLinksIssues$Outbound,
  z.ZodTypeDef,
  PostPaymentLinksIssues
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPaymentLinksIssues$ {
  /** @deprecated use `PostPaymentLinksIssues$inboundSchema` instead. */
  export const inboundSchema = PostPaymentLinksIssues$inboundSchema;
  /** @deprecated use `PostPaymentLinksIssues$outboundSchema` instead. */
  export const outboundSchema = PostPaymentLinksIssues$outboundSchema;
  /** @deprecated use `PostPaymentLinksIssues$Outbound` instead. */
  export type Outbound = PostPaymentLinksIssues$Outbound;
}

export function postPaymentLinksIssuesToJSON(
  postPaymentLinksIssues: PostPaymentLinksIssues,
): string {
  return JSON.stringify(
    PostPaymentLinksIssues$outboundSchema.parse(postPaymentLinksIssues),
  );
}

export function postPaymentLinksIssuesFromJSON(
  jsonString: string,
): SafeParseResult<PostPaymentLinksIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPaymentLinksIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPaymentLinksIssues' from JSON`,
  );
}

/** @internal */
export const PostPaymentLinksError$inboundSchema: z.ZodType<
  PostPaymentLinksError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => PostPaymentLinksIssues$inboundSchema)),
  name: z.string(),
});

/** @internal */
export type PostPaymentLinksError$Outbound = {
  issues: Array<PostPaymentLinksIssues$Outbound>;
  name: string;
};

/** @internal */
export const PostPaymentLinksError$outboundSchema: z.ZodType<
  PostPaymentLinksError$Outbound,
  z.ZodTypeDef,
  PostPaymentLinksError
> = z.object({
  issues: z.array(z.lazy(() => PostPaymentLinksIssues$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPaymentLinksError$ {
  /** @deprecated use `PostPaymentLinksError$inboundSchema` instead. */
  export const inboundSchema = PostPaymentLinksError$inboundSchema;
  /** @deprecated use `PostPaymentLinksError$outboundSchema` instead. */
  export const outboundSchema = PostPaymentLinksError$outboundSchema;
  /** @deprecated use `PostPaymentLinksError$Outbound` instead. */
  export type Outbound = PostPaymentLinksError$Outbound;
}

export function postPaymentLinksErrorToJSON(
  postPaymentLinksError: PostPaymentLinksError,
): string {
  return JSON.stringify(
    PostPaymentLinksError$outboundSchema.parse(postPaymentLinksError),
  );
}

export function postPaymentLinksErrorFromJSON(
  jsonString: string,
): SafeParseResult<PostPaymentLinksError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPaymentLinksError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPaymentLinksError' from JSON`,
  );
}

/** @internal */
export const PostPaymentLinksResponseBody$inboundSchema: z.ZodType<
  PostPaymentLinksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => PostPaymentLinksError$inboundSchema),
})
  .transform((v) => {
    return new PostPaymentLinksResponseBody(v);
  });

/** @internal */
export type PostPaymentLinksResponseBody$Outbound = {
  success: boolean;
  error: PostPaymentLinksError$Outbound;
};

/** @internal */
export const PostPaymentLinksResponseBody$outboundSchema: z.ZodType<
  PostPaymentLinksResponseBody$Outbound,
  z.ZodTypeDef,
  PostPaymentLinksResponseBody
> = z.instanceof(PostPaymentLinksResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => PostPaymentLinksError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPaymentLinksResponseBody$ {
  /** @deprecated use `PostPaymentLinksResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostPaymentLinksResponseBody$inboundSchema;
  /** @deprecated use `PostPaymentLinksResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostPaymentLinksResponseBody$outboundSchema;
  /** @deprecated use `PostPaymentLinksResponseBody$Outbound` instead. */
  export type Outbound = PostPaymentLinksResponseBody$Outbound;
}
