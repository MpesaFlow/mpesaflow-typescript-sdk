/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PostCustomersPath = string | number;

export type PostCustomersIssues = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type PostCustomersError = {
  issues: Array<PostCustomersIssues>;
  name: string;
};

/**
 * The validation error(s)
 */
export type PostCustomersResponseBodyData = {
  success: boolean;
  error: PostCustomersError;
};

/**
 * The validation error(s)
 */
export class PostCustomersResponseBody extends Error {
  success: boolean;
  error: PostCustomersError;

  /** The original data that was passed to this error instance. */
  data$: PostCustomersResponseBodyData;

  constructor(err: PostCustomersResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.success = err.success;
    this.error = err.error;

    this.name = "PostCustomersResponseBody";
  }
}

/** @internal */
export const PostCustomersPath$inboundSchema: z.ZodType<
  PostCustomersPath,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type PostCustomersPath$Outbound = string | number;

/** @internal */
export const PostCustomersPath$outboundSchema: z.ZodType<
  PostCustomersPath$Outbound,
  z.ZodTypeDef,
  PostCustomersPath
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersPath$ {
  /** @deprecated use `PostCustomersPath$inboundSchema` instead. */
  export const inboundSchema = PostCustomersPath$inboundSchema;
  /** @deprecated use `PostCustomersPath$outboundSchema` instead. */
  export const outboundSchema = PostCustomersPath$outboundSchema;
  /** @deprecated use `PostCustomersPath$Outbound` instead. */
  export type Outbound = PostCustomersPath$Outbound;
}

export function postCustomersPathToJSON(
  postCustomersPath: PostCustomersPath,
): string {
  return JSON.stringify(
    PostCustomersPath$outboundSchema.parse(postCustomersPath),
  );
}

export function postCustomersPathFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersPath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersPath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersPath' from JSON`,
  );
}

/** @internal */
export const PostCustomersIssues$inboundSchema: z.ZodType<
  PostCustomersIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/** @internal */
export type PostCustomersIssues$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const PostCustomersIssues$outboundSchema: z.ZodType<
  PostCustomersIssues$Outbound,
  z.ZodTypeDef,
  PostCustomersIssues
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersIssues$ {
  /** @deprecated use `PostCustomersIssues$inboundSchema` instead. */
  export const inboundSchema = PostCustomersIssues$inboundSchema;
  /** @deprecated use `PostCustomersIssues$outboundSchema` instead. */
  export const outboundSchema = PostCustomersIssues$outboundSchema;
  /** @deprecated use `PostCustomersIssues$Outbound` instead. */
  export type Outbound = PostCustomersIssues$Outbound;
}

export function postCustomersIssuesToJSON(
  postCustomersIssues: PostCustomersIssues,
): string {
  return JSON.stringify(
    PostCustomersIssues$outboundSchema.parse(postCustomersIssues),
  );
}

export function postCustomersIssuesFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersIssues' from JSON`,
  );
}

/** @internal */
export const PostCustomersError$inboundSchema: z.ZodType<
  PostCustomersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => PostCustomersIssues$inboundSchema)),
  name: z.string(),
});

/** @internal */
export type PostCustomersError$Outbound = {
  issues: Array<PostCustomersIssues$Outbound>;
  name: string;
};

/** @internal */
export const PostCustomersError$outboundSchema: z.ZodType<
  PostCustomersError$Outbound,
  z.ZodTypeDef,
  PostCustomersError
> = z.object({
  issues: z.array(z.lazy(() => PostCustomersIssues$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersError$ {
  /** @deprecated use `PostCustomersError$inboundSchema` instead. */
  export const inboundSchema = PostCustomersError$inboundSchema;
  /** @deprecated use `PostCustomersError$outboundSchema` instead. */
  export const outboundSchema = PostCustomersError$outboundSchema;
  /** @deprecated use `PostCustomersError$Outbound` instead. */
  export type Outbound = PostCustomersError$Outbound;
}

export function postCustomersErrorToJSON(
  postCustomersError: PostCustomersError,
): string {
  return JSON.stringify(
    PostCustomersError$outboundSchema.parse(postCustomersError),
  );
}

export function postCustomersErrorFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersError' from JSON`,
  );
}

/** @internal */
export const PostCustomersResponseBody$inboundSchema: z.ZodType<
  PostCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => PostCustomersError$inboundSchema),
})
  .transform((v) => {
    return new PostCustomersResponseBody(v);
  });

/** @internal */
export type PostCustomersResponseBody$Outbound = {
  success: boolean;
  error: PostCustomersError$Outbound;
};

/** @internal */
export const PostCustomersResponseBody$outboundSchema: z.ZodType<
  PostCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  PostCustomersResponseBody
> = z.instanceof(PostCustomersResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => PostCustomersError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersResponseBody$ {
  /** @deprecated use `PostCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostCustomersResponseBody$inboundSchema;
  /** @deprecated use `PostCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostCustomersResponseBody$outboundSchema;
  /** @deprecated use `PostCustomersResponseBody$Outbound` instead. */
  export type Outbound = PostCustomersResponseBody$Outbound;
}
