/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PostProductsPath = string | number;

export type PostProductsIssues = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type PostProductsError = {
  issues: Array<PostProductsIssues>;
  name: string;
};

/**
 * The validation error(s)
 */
export type PostProductsResponseBodyData = {
  success: boolean;
  error: PostProductsError;
};

/**
 * The validation error(s)
 */
export class PostProductsResponseBody extends Error {
  success: boolean;
  error: PostProductsError;

  /** The original data that was passed to this error instance. */
  data$: PostProductsResponseBodyData;

  constructor(err: PostProductsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.success = err.success;
    this.error = err.error;

    this.name = "PostProductsResponseBody";
  }
}

/** @internal */
export const PostProductsPath$inboundSchema: z.ZodType<
  PostProductsPath,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type PostProductsPath$Outbound = string | number;

/** @internal */
export const PostProductsPath$outboundSchema: z.ZodType<
  PostProductsPath$Outbound,
  z.ZodTypeDef,
  PostProductsPath
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsPath$ {
  /** @deprecated use `PostProductsPath$inboundSchema` instead. */
  export const inboundSchema = PostProductsPath$inboundSchema;
  /** @deprecated use `PostProductsPath$outboundSchema` instead. */
  export const outboundSchema = PostProductsPath$outboundSchema;
  /** @deprecated use `PostProductsPath$Outbound` instead. */
  export type Outbound = PostProductsPath$Outbound;
}

export function postProductsPathToJSON(
  postProductsPath: PostProductsPath,
): string {
  return JSON.stringify(
    PostProductsPath$outboundSchema.parse(postProductsPath),
  );
}

export function postProductsPathFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsPath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsPath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsPath' from JSON`,
  );
}

/** @internal */
export const PostProductsIssues$inboundSchema: z.ZodType<
  PostProductsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/** @internal */
export type PostProductsIssues$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const PostProductsIssues$outboundSchema: z.ZodType<
  PostProductsIssues$Outbound,
  z.ZodTypeDef,
  PostProductsIssues
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsIssues$ {
  /** @deprecated use `PostProductsIssues$inboundSchema` instead. */
  export const inboundSchema = PostProductsIssues$inboundSchema;
  /** @deprecated use `PostProductsIssues$outboundSchema` instead. */
  export const outboundSchema = PostProductsIssues$outboundSchema;
  /** @deprecated use `PostProductsIssues$Outbound` instead. */
  export type Outbound = PostProductsIssues$Outbound;
}

export function postProductsIssuesToJSON(
  postProductsIssues: PostProductsIssues,
): string {
  return JSON.stringify(
    PostProductsIssues$outboundSchema.parse(postProductsIssues),
  );
}

export function postProductsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsIssues' from JSON`,
  );
}

/** @internal */
export const PostProductsError$inboundSchema: z.ZodType<
  PostProductsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => PostProductsIssues$inboundSchema)),
  name: z.string(),
});

/** @internal */
export type PostProductsError$Outbound = {
  issues: Array<PostProductsIssues$Outbound>;
  name: string;
};

/** @internal */
export const PostProductsError$outboundSchema: z.ZodType<
  PostProductsError$Outbound,
  z.ZodTypeDef,
  PostProductsError
> = z.object({
  issues: z.array(z.lazy(() => PostProductsIssues$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsError$ {
  /** @deprecated use `PostProductsError$inboundSchema` instead. */
  export const inboundSchema = PostProductsError$inboundSchema;
  /** @deprecated use `PostProductsError$outboundSchema` instead. */
  export const outboundSchema = PostProductsError$outboundSchema;
  /** @deprecated use `PostProductsError$Outbound` instead. */
  export type Outbound = PostProductsError$Outbound;
}

export function postProductsErrorToJSON(
  postProductsError: PostProductsError,
): string {
  return JSON.stringify(
    PostProductsError$outboundSchema.parse(postProductsError),
  );
}

export function postProductsErrorFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsError' from JSON`,
  );
}

/** @internal */
export const PostProductsResponseBody$inboundSchema: z.ZodType<
  PostProductsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => PostProductsError$inboundSchema),
})
  .transform((v) => {
    return new PostProductsResponseBody(v);
  });

/** @internal */
export type PostProductsResponseBody$Outbound = {
  success: boolean;
  error: PostProductsError$Outbound;
};

/** @internal */
export const PostProductsResponseBody$outboundSchema: z.ZodType<
  PostProductsResponseBody$Outbound,
  z.ZodTypeDef,
  PostProductsResponseBody
> = z.instanceof(PostProductsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => PostProductsError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsResponseBody$ {
  /** @deprecated use `PostProductsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostProductsResponseBody$inboundSchema;
  /** @deprecated use `PostProductsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostProductsResponseBody$outboundSchema;
  /** @deprecated use `PostProductsResponseBody$Outbound` instead. */
  export type Outbound = PostProductsResponseBody$Outbound;
}
