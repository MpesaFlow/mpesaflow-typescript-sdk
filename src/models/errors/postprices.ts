/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PostPricesPath = string | number;

export type PostPricesIssues = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type PostPricesError = {
  issues: Array<PostPricesIssues>;
  name: string;
};

/**
 * The validation error(s)
 */
export type PostPricesResponseBodyData = {
  success: boolean;
  error: PostPricesError;
};

/**
 * The validation error(s)
 */
export class PostPricesResponseBody extends Error {
  success: boolean;
  error: PostPricesError;

  /** The original data that was passed to this error instance. */
  data$: PostPricesResponseBodyData;

  constructor(err: PostPricesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.success = err.success;
    this.error = err.error;

    this.name = "PostPricesResponseBody";
  }
}

/** @internal */
export const PostPricesPath$inboundSchema: z.ZodType<
  PostPricesPath,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type PostPricesPath$Outbound = string | number;

/** @internal */
export const PostPricesPath$outboundSchema: z.ZodType<
  PostPricesPath$Outbound,
  z.ZodTypeDef,
  PostPricesPath
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesPath$ {
  /** @deprecated use `PostPricesPath$inboundSchema` instead. */
  export const inboundSchema = PostPricesPath$inboundSchema;
  /** @deprecated use `PostPricesPath$outboundSchema` instead. */
  export const outboundSchema = PostPricesPath$outboundSchema;
  /** @deprecated use `PostPricesPath$Outbound` instead. */
  export type Outbound = PostPricesPath$Outbound;
}

export function postPricesPathToJSON(postPricesPath: PostPricesPath): string {
  return JSON.stringify(PostPricesPath$outboundSchema.parse(postPricesPath));
}

export function postPricesPathFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesPath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesPath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesPath' from JSON`,
  );
}

/** @internal */
export const PostPricesIssues$inboundSchema: z.ZodType<
  PostPricesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/** @internal */
export type PostPricesIssues$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const PostPricesIssues$outboundSchema: z.ZodType<
  PostPricesIssues$Outbound,
  z.ZodTypeDef,
  PostPricesIssues
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesIssues$ {
  /** @deprecated use `PostPricesIssues$inboundSchema` instead. */
  export const inboundSchema = PostPricesIssues$inboundSchema;
  /** @deprecated use `PostPricesIssues$outboundSchema` instead. */
  export const outboundSchema = PostPricesIssues$outboundSchema;
  /** @deprecated use `PostPricesIssues$Outbound` instead. */
  export type Outbound = PostPricesIssues$Outbound;
}

export function postPricesIssuesToJSON(
  postPricesIssues: PostPricesIssues,
): string {
  return JSON.stringify(
    PostPricesIssues$outboundSchema.parse(postPricesIssues),
  );
}

export function postPricesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesIssues' from JSON`,
  );
}

/** @internal */
export const PostPricesError$inboundSchema: z.ZodType<
  PostPricesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => PostPricesIssues$inboundSchema)),
  name: z.string(),
});

/** @internal */
export type PostPricesError$Outbound = {
  issues: Array<PostPricesIssues$Outbound>;
  name: string;
};

/** @internal */
export const PostPricesError$outboundSchema: z.ZodType<
  PostPricesError$Outbound,
  z.ZodTypeDef,
  PostPricesError
> = z.object({
  issues: z.array(z.lazy(() => PostPricesIssues$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesError$ {
  /** @deprecated use `PostPricesError$inboundSchema` instead. */
  export const inboundSchema = PostPricesError$inboundSchema;
  /** @deprecated use `PostPricesError$outboundSchema` instead. */
  export const outboundSchema = PostPricesError$outboundSchema;
  /** @deprecated use `PostPricesError$Outbound` instead. */
  export type Outbound = PostPricesError$Outbound;
}

export function postPricesErrorToJSON(
  postPricesError: PostPricesError,
): string {
  return JSON.stringify(PostPricesError$outboundSchema.parse(postPricesError));
}

export function postPricesErrorFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesError' from JSON`,
  );
}

/** @internal */
export const PostPricesResponseBody$inboundSchema: z.ZodType<
  PostPricesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => PostPricesError$inboundSchema),
})
  .transform((v) => {
    return new PostPricesResponseBody(v);
  });

/** @internal */
export type PostPricesResponseBody$Outbound = {
  success: boolean;
  error: PostPricesError$Outbound;
};

/** @internal */
export const PostPricesResponseBody$outboundSchema: z.ZodType<
  PostPricesResponseBody$Outbound,
  z.ZodTypeDef,
  PostPricesResponseBody
> = z.instanceof(PostPricesResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => PostPricesError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesResponseBody$ {
  /** @deprecated use `PostPricesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostPricesResponseBody$inboundSchema;
  /** @deprecated use `PostPricesResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostPricesResponseBody$outboundSchema;
  /** @deprecated use `PostPricesResponseBody$Outbound` instead. */
  export type Outbound = PostPricesResponseBody$Outbound;
}
