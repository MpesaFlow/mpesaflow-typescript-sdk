/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProductsMetadata = {};

export type GetProductsResponseBody = {
  id: string;
  active: boolean;
  defaultPrice: string | null;
  description: string | null;
  images: Array<string>;
  metadata: GetProductsMetadata;
  livemode: boolean;
  name: string;
  created: string | null;
  updated: string | null;
  url: string | null;
};

/** @internal */
export const GetProductsMetadata$inboundSchema: z.ZodType<
  GetProductsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetProductsMetadata$Outbound = {};

/** @internal */
export const GetProductsMetadata$outboundSchema: z.ZodType<
  GetProductsMetadata$Outbound,
  z.ZodTypeDef,
  GetProductsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductsMetadata$ {
  /** @deprecated use `GetProductsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetProductsMetadata$inboundSchema;
  /** @deprecated use `GetProductsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetProductsMetadata$outboundSchema;
  /** @deprecated use `GetProductsMetadata$Outbound` instead. */
  export type Outbound = GetProductsMetadata$Outbound;
}

export function getProductsMetadataToJSON(
  getProductsMetadata: GetProductsMetadata,
): string {
  return JSON.stringify(
    GetProductsMetadata$outboundSchema.parse(getProductsMetadata),
  );
}

export function getProductsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetProductsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductsMetadata' from JSON`,
  );
}

/** @internal */
export const GetProductsResponseBody$inboundSchema: z.ZodType<
  GetProductsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  active: z.boolean(),
  default_price: z.nullable(z.string()),
  description: z.nullable(z.string()),
  images: z.array(z.string()),
  metadata: z.lazy(() => GetProductsMetadata$inboundSchema),
  livemode: z.boolean(),
  name: z.string(),
  created: z.nullable(z.string()),
  updated: z.nullable(z.string()),
  url: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "default_price": "defaultPrice",
  });
});

/** @internal */
export type GetProductsResponseBody$Outbound = {
  id: string;
  active: boolean;
  default_price: string | null;
  description: string | null;
  images: Array<string>;
  metadata: GetProductsMetadata$Outbound;
  livemode: boolean;
  name: string;
  created: string | null;
  updated: string | null;
  url: string | null;
};

/** @internal */
export const GetProductsResponseBody$outboundSchema: z.ZodType<
  GetProductsResponseBody$Outbound,
  z.ZodTypeDef,
  GetProductsResponseBody
> = z.object({
  id: z.string(),
  active: z.boolean(),
  defaultPrice: z.nullable(z.string()),
  description: z.nullable(z.string()),
  images: z.array(z.string()),
  metadata: z.lazy(() => GetProductsMetadata$outboundSchema),
  livemode: z.boolean(),
  name: z.string(),
  created: z.nullable(z.string()),
  updated: z.nullable(z.string()),
  url: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    defaultPrice: "default_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductsResponseBody$ {
  /** @deprecated use `GetProductsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProductsResponseBody$inboundSchema;
  /** @deprecated use `GetProductsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProductsResponseBody$outboundSchema;
  /** @deprecated use `GetProductsResponseBody$Outbound` instead. */
  export type Outbound = GetProductsResponseBody$Outbound;
}

export function getProductsResponseBodyToJSON(
  getProductsResponseBody: GetProductsResponseBody,
): string {
  return JSON.stringify(
    GetProductsResponseBody$outboundSchema.parse(getProductsResponseBody),
  );
}

export function getProductsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProductsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductsResponseBody' from JSON`,
  );
}
