/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The file to create
 */
export type PostFilesRequestBody = {
  expiresAt: string;
  filename: string;
  livemode?: boolean | undefined;
  purpose: string;
  title?: string | null | undefined;
  size: string;
  type: string;
  url: string;
};

/**
 * Create a File
 */
export type PostFilesResponseBody = {
  id: string;
  business: string;
  user: string;
  object: string;
  created: string;
  expiresAt: string;
  filename: string;
  livemode: boolean;
  purpose: string;
  title: string | null;
  size: string;
  type: string;
  url: string;
  updated: string | null;
};

/** @internal */
export const PostFilesRequestBody$inboundSchema: z.ZodType<
  PostFilesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires_at: z.string(),
  filename: z.string(),
  livemode: z.boolean().optional(),
  purpose: z.string(),
  title: z.nullable(z.string()).optional(),
  size: z.string(),
  type: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type PostFilesRequestBody$Outbound = {
  expires_at: string;
  filename: string;
  livemode?: boolean | undefined;
  purpose: string;
  title?: string | null | undefined;
  size: string;
  type: string;
  url: string;
};

/** @internal */
export const PostFilesRequestBody$outboundSchema: z.ZodType<
  PostFilesRequestBody$Outbound,
  z.ZodTypeDef,
  PostFilesRequestBody
> = z.object({
  expiresAt: z.string(),
  filename: z.string(),
  livemode: z.boolean().optional(),
  purpose: z.string(),
  title: z.nullable(z.string()).optional(),
  size: z.string(),
  type: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFilesRequestBody$ {
  /** @deprecated use `PostFilesRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostFilesRequestBody$inboundSchema;
  /** @deprecated use `PostFilesRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostFilesRequestBody$outboundSchema;
  /** @deprecated use `PostFilesRequestBody$Outbound` instead. */
  export type Outbound = PostFilesRequestBody$Outbound;
}

export function postFilesRequestBodyToJSON(
  postFilesRequestBody: PostFilesRequestBody,
): string {
  return JSON.stringify(
    PostFilesRequestBody$outboundSchema.parse(postFilesRequestBody),
  );
}

export function postFilesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostFilesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostFilesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostFilesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostFilesResponseBody$inboundSchema: z.ZodType<
  PostFilesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  business: z.string(),
  user: z.string(),
  object: z.string(),
  created: z.string(),
  expires_at: z.string(),
  filename: z.string(),
  livemode: z.boolean(),
  purpose: z.string(),
  title: z.nullable(z.string()),
  size: z.string(),
  type: z.string(),
  url: z.string(),
  updated: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type PostFilesResponseBody$Outbound = {
  id: string;
  business: string;
  user: string;
  object: string;
  created: string;
  expires_at: string;
  filename: string;
  livemode: boolean;
  purpose: string;
  title: string | null;
  size: string;
  type: string;
  url: string;
  updated: string | null;
};

/** @internal */
export const PostFilesResponseBody$outboundSchema: z.ZodType<
  PostFilesResponseBody$Outbound,
  z.ZodTypeDef,
  PostFilesResponseBody
> = z.object({
  id: z.string(),
  business: z.string(),
  user: z.string(),
  object: z.string(),
  created: z.string(),
  expiresAt: z.string(),
  filename: z.string(),
  livemode: z.boolean(),
  purpose: z.string(),
  title: z.nullable(z.string()),
  size: z.string(),
  type: z.string(),
  url: z.string(),
  updated: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFilesResponseBody$ {
  /** @deprecated use `PostFilesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostFilesResponseBody$inboundSchema;
  /** @deprecated use `PostFilesResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostFilesResponseBody$outboundSchema;
  /** @deprecated use `PostFilesResponseBody$Outbound` instead. */
  export type Outbound = PostFilesResponseBody$Outbound;
}

export function postFilesResponseBodyToJSON(
  postFilesResponseBody: PostFilesResponseBody,
): string {
  return JSON.stringify(
    PostFilesResponseBody$outboundSchema.parse(postFilesResponseBody),
  );
}

export function postFilesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostFilesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostFilesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostFilesResponseBody' from JSON`,
  );
}
