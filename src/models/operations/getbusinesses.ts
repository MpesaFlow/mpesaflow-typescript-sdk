/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBusinessesTestEnvs = {
  passKey: string | null;
  consumerKey: string | null;
  consumerSecret: string | null;
  businessShortCode: string | null;
};

export type GetBusinessesLiveEnvs = {
  passKey: string | null;
  consumerKey: string | null;
  consumerSecret: string | null;
  businessShortCode: string | null;
};

export type ResponseBody = {
  id: string;
  user: string;
  object: string;
  active: boolean;
  created: string;
  livemode: boolean;
  businessIcon: string | null;
  businessLogo: string | null;
  name: string;
  testEnvs: GetBusinessesTestEnvs;
  liveEnvs: GetBusinessesLiveEnvs;
};

/** @internal */
export const GetBusinessesTestEnvs$inboundSchema: z.ZodType<
  GetBusinessesTestEnvs,
  z.ZodTypeDef,
  unknown
> = z.object({
  pass_key: z.nullable(z.string()),
  consumer_key: z.nullable(z.string()),
  consumer_secret: z.nullable(z.string()),
  business_short_code: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "pass_key": "passKey",
    "consumer_key": "consumerKey",
    "consumer_secret": "consumerSecret",
    "business_short_code": "businessShortCode",
  });
});

/** @internal */
export type GetBusinessesTestEnvs$Outbound = {
  pass_key: string | null;
  consumer_key: string | null;
  consumer_secret: string | null;
  business_short_code: string | null;
};

/** @internal */
export const GetBusinessesTestEnvs$outboundSchema: z.ZodType<
  GetBusinessesTestEnvs$Outbound,
  z.ZodTypeDef,
  GetBusinessesTestEnvs
> = z.object({
  passKey: z.nullable(z.string()),
  consumerKey: z.nullable(z.string()),
  consumerSecret: z.nullable(z.string()),
  businessShortCode: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    passKey: "pass_key",
    consumerKey: "consumer_key",
    consumerSecret: "consumer_secret",
    businessShortCode: "business_short_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBusinessesTestEnvs$ {
  /** @deprecated use `GetBusinessesTestEnvs$inboundSchema` instead. */
  export const inboundSchema = GetBusinessesTestEnvs$inboundSchema;
  /** @deprecated use `GetBusinessesTestEnvs$outboundSchema` instead. */
  export const outboundSchema = GetBusinessesTestEnvs$outboundSchema;
  /** @deprecated use `GetBusinessesTestEnvs$Outbound` instead. */
  export type Outbound = GetBusinessesTestEnvs$Outbound;
}

export function getBusinessesTestEnvsToJSON(
  getBusinessesTestEnvs: GetBusinessesTestEnvs,
): string {
  return JSON.stringify(
    GetBusinessesTestEnvs$outboundSchema.parse(getBusinessesTestEnvs),
  );
}

export function getBusinessesTestEnvsFromJSON(
  jsonString: string,
): SafeParseResult<GetBusinessesTestEnvs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBusinessesTestEnvs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBusinessesTestEnvs' from JSON`,
  );
}

/** @internal */
export const GetBusinessesLiveEnvs$inboundSchema: z.ZodType<
  GetBusinessesLiveEnvs,
  z.ZodTypeDef,
  unknown
> = z.object({
  pass_key: z.nullable(z.string()),
  consumer_key: z.nullable(z.string()),
  consumer_secret: z.nullable(z.string()),
  business_short_code: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "pass_key": "passKey",
    "consumer_key": "consumerKey",
    "consumer_secret": "consumerSecret",
    "business_short_code": "businessShortCode",
  });
});

/** @internal */
export type GetBusinessesLiveEnvs$Outbound = {
  pass_key: string | null;
  consumer_key: string | null;
  consumer_secret: string | null;
  business_short_code: string | null;
};

/** @internal */
export const GetBusinessesLiveEnvs$outboundSchema: z.ZodType<
  GetBusinessesLiveEnvs$Outbound,
  z.ZodTypeDef,
  GetBusinessesLiveEnvs
> = z.object({
  passKey: z.nullable(z.string()),
  consumerKey: z.nullable(z.string()),
  consumerSecret: z.nullable(z.string()),
  businessShortCode: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    passKey: "pass_key",
    consumerKey: "consumer_key",
    consumerSecret: "consumer_secret",
    businessShortCode: "business_short_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBusinessesLiveEnvs$ {
  /** @deprecated use `GetBusinessesLiveEnvs$inboundSchema` instead. */
  export const inboundSchema = GetBusinessesLiveEnvs$inboundSchema;
  /** @deprecated use `GetBusinessesLiveEnvs$outboundSchema` instead. */
  export const outboundSchema = GetBusinessesLiveEnvs$outboundSchema;
  /** @deprecated use `GetBusinessesLiveEnvs$Outbound` instead. */
  export type Outbound = GetBusinessesLiveEnvs$Outbound;
}

export function getBusinessesLiveEnvsToJSON(
  getBusinessesLiveEnvs: GetBusinessesLiveEnvs,
): string {
  return JSON.stringify(
    GetBusinessesLiveEnvs$outboundSchema.parse(getBusinessesLiveEnvs),
  );
}

export function getBusinessesLiveEnvsFromJSON(
  jsonString: string,
): SafeParseResult<GetBusinessesLiveEnvs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBusinessesLiveEnvs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBusinessesLiveEnvs' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  user: z.string(),
  object: z.string(),
  active: z.boolean(),
  created: z.string(),
  livemode: z.boolean(),
  business_icon: z.nullable(z.string()),
  business_logo: z.nullable(z.string()),
  name: z.string(),
  test_envs: z.lazy(() => GetBusinessesTestEnvs$inboundSchema),
  live_envs: z.lazy(() => GetBusinessesLiveEnvs$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "business_icon": "businessIcon",
    "business_logo": "businessLogo",
    "test_envs": "testEnvs",
    "live_envs": "liveEnvs",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  id: string;
  user: string;
  object: string;
  active: boolean;
  created: string;
  livemode: boolean;
  business_icon: string | null;
  business_logo: string | null;
  name: string;
  test_envs: GetBusinessesTestEnvs$Outbound;
  live_envs: GetBusinessesLiveEnvs$Outbound;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  id: z.string(),
  user: z.string(),
  object: z.string(),
  active: z.boolean(),
  created: z.string(),
  livemode: z.boolean(),
  businessIcon: z.nullable(z.string()),
  businessLogo: z.nullable(z.string()),
  name: z.string(),
  testEnvs: z.lazy(() => GetBusinessesTestEnvs$outboundSchema),
  liveEnvs: z.lazy(() => GetBusinessesLiveEnvs$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    businessIcon: "business_icon",
    businessLogo: "business_logo",
    testEnvs: "test_envs",
    liveEnvs: "live_envs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
