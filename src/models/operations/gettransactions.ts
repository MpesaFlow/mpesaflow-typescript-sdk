/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MpesaResults = {
  resultCode: number | null;
  resultDesc: string | null;
  transactionAmount: number | null;
  transactionDate: string | null;
  transactionPhoneNumber: string | null;
  receiptNumber: string | null;
};

export const Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type Status = ClosedEnum<typeof Status>;

export const Type = {
  Payment: "payment",
  Donation: "donation",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type GetTransactionsResponseBody = {
  id: string;
  business: string;
  user: string;
  customer: string | null;
  object: string;
  amount: string;
  phoneNumber: string;
  created: string;
  currency: string;
  description: string | null;
  mpesaCheckoutRequestId: string | null;
  mpesaMerchantRequestId: string | null;
  mpesaResults: MpesaResults;
  status: Status | null;
  type: Type | null;
  updated: string | null;
};

/** @internal */
export const MpesaResults$inboundSchema: z.ZodType<
  MpesaResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  result_code: z.nullable(z.number()),
  result_desc: z.nullable(z.string()),
  transaction_amount: z.nullable(z.number()),
  transaction_date: z.nullable(z.string()),
  transaction_phone_number: z.nullable(z.string()),
  receipt_number: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "result_code": "resultCode",
    "result_desc": "resultDesc",
    "transaction_amount": "transactionAmount",
    "transaction_date": "transactionDate",
    "transaction_phone_number": "transactionPhoneNumber",
    "receipt_number": "receiptNumber",
  });
});

/** @internal */
export type MpesaResults$Outbound = {
  result_code: number | null;
  result_desc: string | null;
  transaction_amount: number | null;
  transaction_date: string | null;
  transaction_phone_number: string | null;
  receipt_number: string | null;
};

/** @internal */
export const MpesaResults$outboundSchema: z.ZodType<
  MpesaResults$Outbound,
  z.ZodTypeDef,
  MpesaResults
> = z.object({
  resultCode: z.nullable(z.number()),
  resultDesc: z.nullable(z.string()),
  transactionAmount: z.nullable(z.number()),
  transactionDate: z.nullable(z.string()),
  transactionPhoneNumber: z.nullable(z.string()),
  receiptNumber: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    resultCode: "result_code",
    resultDesc: "result_desc",
    transactionAmount: "transaction_amount",
    transactionDate: "transaction_date",
    transactionPhoneNumber: "transaction_phone_number",
    receiptNumber: "receipt_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MpesaResults$ {
  /** @deprecated use `MpesaResults$inboundSchema` instead. */
  export const inboundSchema = MpesaResults$inboundSchema;
  /** @deprecated use `MpesaResults$outboundSchema` instead. */
  export const outboundSchema = MpesaResults$outboundSchema;
  /** @deprecated use `MpesaResults$Outbound` instead. */
  export type Outbound = MpesaResults$Outbound;
}

export function mpesaResultsToJSON(mpesaResults: MpesaResults): string {
  return JSON.stringify(MpesaResults$outboundSchema.parse(mpesaResults));
}

export function mpesaResultsFromJSON(
  jsonString: string,
): SafeParseResult<MpesaResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MpesaResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MpesaResults' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const GetTransactionsResponseBody$inboundSchema: z.ZodType<
  GetTransactionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  business: z.string(),
  user: z.string(),
  customer: z.nullable(z.string()),
  object: z.string(),
  amount: z.string(),
  phone_number: z.string(),
  created: z.string(),
  currency: z.string(),
  description: z.nullable(z.string()),
  mpesa_checkout_request_id: z.nullable(z.string()),
  mpesa_merchant_request_id: z.nullable(z.string()),
  mpesa_results: z.lazy(() => MpesaResults$inboundSchema),
  status: z.nullable(Status$inboundSchema),
  type: z.nullable(Type$inboundSchema),
  updated: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "phone_number": "phoneNumber",
    "mpesa_checkout_request_id": "mpesaCheckoutRequestId",
    "mpesa_merchant_request_id": "mpesaMerchantRequestId",
    "mpesa_results": "mpesaResults",
  });
});

/** @internal */
export type GetTransactionsResponseBody$Outbound = {
  id: string;
  business: string;
  user: string;
  customer: string | null;
  object: string;
  amount: string;
  phone_number: string;
  created: string;
  currency: string;
  description: string | null;
  mpesa_checkout_request_id: string | null;
  mpesa_merchant_request_id: string | null;
  mpesa_results: MpesaResults$Outbound;
  status: string | null;
  type: string | null;
  updated: string | null;
};

/** @internal */
export const GetTransactionsResponseBody$outboundSchema: z.ZodType<
  GetTransactionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetTransactionsResponseBody
> = z.object({
  id: z.string(),
  business: z.string(),
  user: z.string(),
  customer: z.nullable(z.string()),
  object: z.string(),
  amount: z.string(),
  phoneNumber: z.string(),
  created: z.string(),
  currency: z.string(),
  description: z.nullable(z.string()),
  mpesaCheckoutRequestId: z.nullable(z.string()),
  mpesaMerchantRequestId: z.nullable(z.string()),
  mpesaResults: z.lazy(() => MpesaResults$outboundSchema),
  status: z.nullable(Status$outboundSchema),
  type: z.nullable(Type$outboundSchema),
  updated: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    phoneNumber: "phone_number",
    mpesaCheckoutRequestId: "mpesa_checkout_request_id",
    mpesaMerchantRequestId: "mpesa_merchant_request_id",
    mpesaResults: "mpesa_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsResponseBody$ {
  /** @deprecated use `GetTransactionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsResponseBody$inboundSchema;
  /** @deprecated use `GetTransactionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsResponseBody$outboundSchema;
  /** @deprecated use `GetTransactionsResponseBody$Outbound` instead. */
  export type Outbound = GetTransactionsResponseBody$Outbound;
}

export function getTransactionsResponseBodyToJSON(
  getTransactionsResponseBody: GetTransactionsResponseBody,
): string {
  return JSON.stringify(
    GetTransactionsResponseBody$outboundSchema.parse(
      getTransactionsResponseBody,
    ),
  );
}

export function getTransactionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsResponseBody' from JSON`,
  );
}
