/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The price to create
 */
export type PostPricesRequestBody = {
  product: string;
  active?: boolean | undefined;
  created?: string | undefined;
  currency?: string | undefined;
  livemode?: boolean | undefined;
  nickname?: string | null | undefined;
  unitAmount?: number | undefined;
  unitAmountDecimal?: string | undefined;
};

/**
 * Create a Price
 */
export type PostPricesResponseBody = {
  id: string;
  user: string;
  business: string;
  product: string;
  object: string;
  active: boolean;
  created: string;
  currency: string;
  livemode: boolean;
  nickname: string | null;
  unitAmount: number;
  unitAmountDecimal: string;
};

/** @internal */
export const PostPricesRequestBody$inboundSchema: z.ZodType<
  PostPricesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: z.string(),
  active: z.boolean().optional(),
  created: z.string().optional(),
  currency: z.string().optional(),
  livemode: z.boolean().optional(),
  nickname: z.nullable(z.string()).optional(),
  unit_amount: z.number().int().optional(),
  unit_amount_decimal: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "unit_amount": "unitAmount",
    "unit_amount_decimal": "unitAmountDecimal",
  });
});

/** @internal */
export type PostPricesRequestBody$Outbound = {
  product: string;
  active?: boolean | undefined;
  created?: string | undefined;
  currency?: string | undefined;
  livemode?: boolean | undefined;
  nickname?: string | null | undefined;
  unit_amount?: number | undefined;
  unit_amount_decimal?: string | undefined;
};

/** @internal */
export const PostPricesRequestBody$outboundSchema: z.ZodType<
  PostPricesRequestBody$Outbound,
  z.ZodTypeDef,
  PostPricesRequestBody
> = z.object({
  product: z.string(),
  active: z.boolean().optional(),
  created: z.string().optional(),
  currency: z.string().optional(),
  livemode: z.boolean().optional(),
  nickname: z.nullable(z.string()).optional(),
  unitAmount: z.number().int().optional(),
  unitAmountDecimal: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    unitAmount: "unit_amount",
    unitAmountDecimal: "unit_amount_decimal",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesRequestBody$ {
  /** @deprecated use `PostPricesRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostPricesRequestBody$inboundSchema;
  /** @deprecated use `PostPricesRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostPricesRequestBody$outboundSchema;
  /** @deprecated use `PostPricesRequestBody$Outbound` instead. */
  export type Outbound = PostPricesRequestBody$Outbound;
}

export function postPricesRequestBodyToJSON(
  postPricesRequestBody: PostPricesRequestBody,
): string {
  return JSON.stringify(
    PostPricesRequestBody$outboundSchema.parse(postPricesRequestBody),
  );
}

export function postPricesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostPricesResponseBody$inboundSchema: z.ZodType<
  PostPricesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  user: z.string(),
  business: z.string(),
  product: z.string(),
  object: z.string(),
  active: z.boolean(),
  created: z.string(),
  currency: z.string(),
  livemode: z.boolean(),
  nickname: z.nullable(z.string()),
  unit_amount: z.number().int(),
  unit_amount_decimal: z.string(),
}).transform((v) => {
  return remap$(v, {
    "unit_amount": "unitAmount",
    "unit_amount_decimal": "unitAmountDecimal",
  });
});

/** @internal */
export type PostPricesResponseBody$Outbound = {
  id: string;
  user: string;
  business: string;
  product: string;
  object: string;
  active: boolean;
  created: string;
  currency: string;
  livemode: boolean;
  nickname: string | null;
  unit_amount: number;
  unit_amount_decimal: string;
};

/** @internal */
export const PostPricesResponseBody$outboundSchema: z.ZodType<
  PostPricesResponseBody$Outbound,
  z.ZodTypeDef,
  PostPricesResponseBody
> = z.object({
  id: z.string(),
  user: z.string(),
  business: z.string(),
  product: z.string(),
  object: z.string(),
  active: z.boolean(),
  created: z.string(),
  currency: z.string(),
  livemode: z.boolean(),
  nickname: z.nullable(z.string()),
  unitAmount: z.number().int(),
  unitAmountDecimal: z.string(),
}).transform((v) => {
  return remap$(v, {
    unitAmount: "unit_amount",
    unitAmountDecimal: "unit_amount_decimal",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesResponseBody$ {
  /** @deprecated use `PostPricesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostPricesResponseBody$inboundSchema;
  /** @deprecated use `PostPricesResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostPricesResponseBody$outboundSchema;
  /** @deprecated use `PostPricesResponseBody$Outbound` instead. */
  export type Outbound = PostPricesResponseBody$Outbound;
}

export function postPricesResponseBodyToJSON(
  postPricesResponseBody: PostPricesResponseBody,
): string {
  return JSON.stringify(
    PostPricesResponseBody$outboundSchema.parse(postPricesResponseBody),
  );
}

export function postPricesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesResponseBody' from JSON`,
  );
}
